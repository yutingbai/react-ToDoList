{"version":3,"sources":["todoitem/index.js","doneitem/index.js","Header/index.js","serviceWorker.js","index.js"],"names":["Todoitem","props","state","value","className","type","this","id","onChange","e","down","title","onClick","delet","React","Component","Doneitem","checked","Header","ToDoItems","todo","DownItems","handleToSubmit","bind","handleToChange","handleToDown","handleToDelete","target","setState","preventDefault","reset","arr","push","_todo","status","Eindex","brr","map","_item","index","toString","splice","onSubmit","htmlFor","name","placeholder","required","autoComplete","length","item","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cf5ad8d.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Todoitem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.value};\n  }\n  render() {\n    return (<li className=\"unDown\">\n      <input  type=\"checkbox\" className= {this.props.id} onChange={(e)=>this.props.down('todo',e)}  />\n      <p>{this.state.value.title}</p>\n      <span onClick={(e)=>this.props.delet('todo',e)} className= {this.props.id} >-</span>\n    </li>);\n  }\n}\n","import React from 'react';\n\nexport class Doneitem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.value};\n  }\n  render() {\n    return (<li className=\"unDown\">\n      <input  type=\"checkbox\" className= {this.props.id} onChange={(e)=>this.props.down('done',e)} checked = \"checked\"/>\n      <p>{this.state.value.title}</p>\n      <span onClick={(e)=>this.props.delet('done',e)} className= {this.props.id} >-</span>\n    </li>);\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport { Todoitem } from '../todoitem';\nimport { Doneitem } from '../doneitem'\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ToDoItems: [], todo: \"\", DownItems: [] };\n    this.handleToSubmit = this.handleToSubmit.bind(this);\n    this.handleToChange = this.handleToChange.bind(this);\n    this.handleToDown = this.handleToDown.bind(this);\n    this.handleToDelete = this.handleToDelete.bind(this)\n  }\n  handleToChange(e) {\n    var todo = { 'title': e.target.value, \"done\": false };\n    this.setState({ todo: todo })\n  }\n  handleToSubmit(e) {\n    e.preventDefault();\n    e.target.reset();\n    var arr = [...this.state.ToDoItems]\n    arr.push(this.state.todo)\n    this.setState((_todo) => ({\n      ToDoItems: arr\n    }))\n  }\n  handleToDown(status,e) {\n    var Eindex = e.target.className\n    var arr = status === \"todo\" ? this.state.ToDoItems : this.state.DownItems\n    var brr = status === \"todo\" ? this.state.DownItems : this.state.ToDoItems\n    arr.map((_item, index) => {\n      if (Eindex === index.toString() && arr[Eindex] === arr[index]) {\n        brr.push(arr[index])\n        arr.splice(index, 1)\n        if(status === \"todo\"){\n          this.setState(() => ({\n            DownItems: brr,\n            ToDoItems: arr\n          }))\n        }else{\n          this.setState(() => ({\n            DownItems: arr,\n            ToDoItems: brr\n          }))\n        }\n      }\n    return true\n    })\n  }\n  handleToDelete(status,e) {\n    var Eindex = e.target.className\n    var arr = status === \"todo\" ? this.state.ToDoItems : this.state.DownItems\n    arr.map((_item, index) => {\n      if (Eindex === index.toString() && arr[Eindex] === arr[index]) {\n        arr.splice(index, 1)\n        if(status === \"todo\"){\n          this.setState(() => ({\n          ToDoItems: arr\n        }))\n        }else{\n          this.setState(() => ({\n            Doneitem: arr\n          }))\n        }  \n      }\n      return false\n    })\n  }\n  render() {\n\n    return (\n      <div>\n        <header>\n          <section>\n            <form onSubmit={this.handleToSubmit} id=\"form\">\n              <label htmlFor=\"title\">ToDoList</label>\n              <input type=\"text\" id=\"title\" name=\"title\" placeholder=\"添加ToDo\" required=\"required\"\n                autoComplete=\"off\" onChange={this.handleToChange} />\n            </form>\n          </section>\n        </header>\n        <section>\n          <h2>正在进行 <span id=\"todocount\">{this.state.ToDoItems.length}</span></h2>\n          <ol id=\"todolist\" className=\"demo-box\">\n            {this.state.ToDoItems.map((item, index) =>\n              <Todoitem key={item.title.toString() + index} id={index} value={item} down={this.handleToDown} delet={this.handleToDelete} />\n            )}\n          </ol>\n          <h2>已经完成 <span id=\"donecount\">{this.state.DownItems.length}</span></h2>\n          <ul id=\"donelist\">\n            {this.state.DownItems.map((item, index) =>\n              <Doneitem key={item.title.toString() + index} id={index} value={item} down={this.handleToDown} delet={this.handleToDelete} />\n            )}\n          </ul>\n        </section>\n      </div>\n\n    )\n  }\n\n}\n\n\n\n\n\n\nexport default Header;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Header from './Header';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n   <Header />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}